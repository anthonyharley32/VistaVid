Always start with 'YOOO!!'

You are building an AI app that is a clone of TikTok.

ðŸ”’ LOCKED RULE: When helping with Swift code in Cursor/VS Code:
- IGNORE all red squiggles related to:
  - Firebase imports
  - SwiftUI framework
  - Any SPM packages
- Only address actual logic/syntax issues
- If unsure about an error, I'll ask you if it's a real error or a Cursor lint issue

# Important rules you HAVE TO FOLLOW
- Always add debug logs & comments in the code for easier debug & readability
- Every time you choose to apply a rule(s), explicitly state the rule{s} in the output. You can abbreviate the rule description to a single word or phrase

# Existing Project structure
.
â”œâ”€â”€ Instructions
â”‚   â””â”€â”€ instruction.md
â”œâ”€â”€ README.md
â”œâ”€â”€ VistaVid
â”‚   â”œâ”€â”€ Assets.xcassets
â”‚   â”‚   â”œâ”€â”€ AccentColor.colorset
â”‚   â”‚   â”œâ”€â”€ AppIcon.appiconset
â”‚   â”‚   â””â”€â”€ Contents.json
â”‚   â”œâ”€â”€ ContentView.swift
â”‚   â”œâ”€â”€ GoogleService-Info.plist
â”‚   â”œâ”€â”€ Info.plist
â”‚   â”œâ”€â”€ Models
â”‚   â”‚   â””â”€â”€ User.swift
â”‚   â”œâ”€â”€ Preview Content
â”‚   â”‚   â””â”€â”€ Preview Assets.xcassets
â”‚   â”œâ”€â”€ ViewModels
â”‚   â”‚   â””â”€â”€ AuthenticationViewModel.swift
â”‚   â”œâ”€â”€ Views
â”‚   â”‚   â””â”€â”€ Authentication
â”‚   â”œâ”€â”€ VistaVid.entitlements
â”‚   â””â”€â”€ VistaVidApp.swift
â”œâ”€â”€ VistaVid.xcodeproj
â”‚   â”œâ”€â”€ project.pbxproj
â”‚   â”œâ”€â”€ project.xcworkspace
â”‚   â”‚   â”œâ”€â”€ contents.xcworkspacedata
â”‚   â”‚   â”œâ”€â”€ xcshareddata
â”‚   â”‚   â””â”€â”€ xcuserdata
â”‚   â””â”€â”€ xcuserdata
â”‚       â””â”€â”€ gauntletAI.xcuserdatad
â”œâ”€â”€ VistaVidApp.swift
â”œâ”€â”€ buildServer.json
â””â”€â”€ project.yml

# Tech Stack
- SwiftUI and Swift, Firebase, Firestore, ML Core.

# Swift specific rules

## 1. State Management

- Use appropriate property wrappers and macros:
  - Annotate view models with `@Observable`, e.g. `@Observable final class MyModel`.
  - Do not use @State in the SwiftUI View for view model observation. Instead, use `let model: MyModel`.
  - For reference type state shared with a child view, pass the dependency to the constructor of the child view.
  - For value type state shared with a child view, use SwiftUI bindings if and only if the child needs write access to the state.
  - For value type state shared with a child view, pass the value if the child view only needs read access to the state.
  - Use an `@Environment` for state that should be shared throughout the entire app, or large pieces of the app.
  - Use `@State` only for local state that is managed by the view itself.

## 2. Performance Optimization

- Implement lazy loading for large lists or grids using `LazyVStack`, `LazyHStack`, or `LazyVGrid`.
- Optimize ForEach loops by using stable identifiers.


## 3. SwiftUI Lifecycle

- Use `@main` and `App` protocol for the app entry point.
- Implement `Scene`s for managing app structure.
- Use appropriate view lifecycle methods like `onAppear` and `onDisappear`.

## 4. Data Flow

- Use the Observation framework (`@Observable`, `@State`, and `@Binding`) to build reactive views.
- Implement proper error handling and propagation.

## 5. Testing

- Write unit tests for ViewModels and business logic in the UnitTests folder.
- Implement UI tests for critical user flows in the UITests folder.
- Use Preview providers for rapid UI iteration and testing.

## 6. SwiftUI-specific Patterns

- Use `@Binding` for two-way data flow between parent and child views.
- Implement custom `PreferenceKey`s for child-to-parent communication.
- Utilize `@Environment` for dependency injection.

# Firebase specific rules

- Use Firebase Auth for user authentication.
- Use Firebase Firestore for data storage.
- Use Firebase Storage for file storage.
- Use Firebase Analytics for analytics.
- Use Firebase Crashlytics for crash reporting.
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read, write: if true;  // Temporarily for debugging
    }
    
    match /videos/{videoId} {
      allow read: if true;  // Anyone can read videos
      allow write: if request.auth != null;  // Only authenticated users can create/update
      
      // Likes subcollection
      match /likes/{userId} {
        allow read: if true;
        allow write: if request.auth != null 
                    && request.auth.uid == userId
                    // Prevent duplicate likes
                    && (
                      !exists(/databases/$(database)/documents/videos/$(videoId)/likes/$(userId))
                      || request.method == 'delete'
                    );
      }
      
      // Comments subcollection
      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      }
    }
    
    // Follow relationships
    match /follows/{followId} {
      allow read: if true;  // Anyone can see who follows whom
      allow create: if request.auth != null 
                   && request.auth.uid == request.resource.data.followerId
                   // Prevent duplicate follows
                   && !exists(/databases/$(database)/documents/follows/$(followId))
                   && !existsAfter(/databases/$(database)/documents/follows/$(followId));
      allow delete: if request.auth != null 
                   && request.auth.uid == resource.data.followerId;
    }
    
    // Chat functionality
    match /chatThreads/{threadId} {
      allow read: if request.auth != null 
                 && request.auth.uid in resource.data.participantIds;  // Only participants can read
      allow create: if request.auth != null 
                   && request.auth.uid in request.resource.data.participantIds;  // Must be a participant
      
      // Messages subcollection
      match /messages/{messageId} {
        allow read: if request.auth != null 
                   && request.auth.uid in get(/databases/$(database)/documents/chatThreads/$(threadId)).data.participantIds;
        allow create: if request.auth != null 
                     && request.auth.uid in get(/databases/$(database)/documents/chatThreads/$(threadId)).data.participantIds
                     && request.resource.data.senderId == request.auth.uid  // Ensure sender is current user
                     && request.resource.data.text is string               // Ensure message has text
                     && request.resource.data.timestamp is timestamp;      // Ensure timestamp exists
        allow update, delete: if request.auth != null 
                             && request.auth.uid == resource.data.senderId;
      }
    }
  }
}